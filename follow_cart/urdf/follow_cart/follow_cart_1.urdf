<?xml version="1.0" ?>
<robot name="turtlebot3_waffle_pi" xmlns:xacro="http://ros.org/wiki/xacro">
  <xacro:arg name="robot_name" default="fc1" />

  <link name="$(arg robot_name)/base_footprint"/>

  <link name="$(arg robot_name)/base_link">
    <visual>
      <origin xyz="-0.064 0 0.0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="file://$(find turtlebot3_description)/meshes/bases/waffle_pi_base.stl" scale="0.001 0.001 0.001"/>
      </geometry>
    </visual>

    <collision>
      <origin xyz="-0.064 0 0.047" rpy="0 0 0"/>
      <geometry>
        <box size="0.266 0.266 0.094"/>
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1.3729096e+00"/>
      <inertia ixx="8.7002718e-03" ixy="-4.7576583e-05" ixz="1.1160499e-04"
               iyy="8.6195418e-03" iyz="-3.5422299e-06"
               izz="1.4612727e-02" />
    </inertial>
  </link>

  <link name="$(arg robot_name)/wheel_left_link">
    <visual>
      <origin xyz="0 0 0" rpy="1.57 0 0"/>
      <geometry>
        <mesh filename="file://$(find turtlebot3_description)/meshes/wheels/left_tire.stl" scale="0.001 0.001 0.001"/>
      </geometry>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.018" radius="0.033"/>
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0" />
      <mass value="2.8498940e-02" />
      <inertia ixx="1.1175580e-05" ixy="-4.2369783e-11" ixz="-5.9381719e-09"
               iyy="1.1192413e-05" iyz="-1.4400107e-11"
               izz="2.0712558e-05" />
      </inertial>
  </link>

  <link name="$(arg robot_name)/wheel_right_link">
    <visual>
      <origin xyz="0 0 0" rpy="1.57 0 0"/>
      <geometry>
        <mesh filename="file://$(find turtlebot3_description)/meshes/wheels/right_tire.stl" scale="0.001 0.001 0.001"/>
      </geometry>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.018" radius="0.033"/>
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0" />
      <mass value="2.8498940e-02" />
      <inertia ixx="1.1175580e-05" ixy="-4.2369783e-11" ixz="-5.9381719e-09"
               iyy="1.1192413e-05" iyz="-1.4400107e-11"
               izz="2.0712558e-05" />
      </inertial>
  </link>

  <link name="$(arg robot_name)/caster_back_right_link">
    <collision>
      <origin xyz="0 0.001 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.030 0.009 0.020"/>
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0" />
      <mass value="0.005" />
      <inertia ixx="0.001" ixy="0.0" ixz="0.0"
               iyy="0.001" iyz="0.0"
               izz="0.001" />
    </inertial>
  </link>

  <link name="$(arg robot_name)/caster_back_left_link">
    <collision>
      <origin xyz="0 0.001 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.030 0.009 0.020"/>
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0" />
      <mass value="0.005" />
      <inertia ixx="0.001" ixy="0.0" ixz="0.0"
               iyy="0.001" iyz="0.0"
               izz="0.001" />
    </inertial>
  </link>

  <link name="$(arg robot_name)/imu_link"/>

  <link name="$(arg robot_name)/base_scan">
    <visual>
      <origin xyz="0 0 0.0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="file://$(find turtlebot3_description)/meshes/sensors/lds.stl" scale="0.001 0.001 0.001"/>
      </geometry>
    </visual>

    <collision>
      <origin xyz="0.015 0 -0.0065" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.0315" radius="0.055"/>
      </geometry>
    </collision>

    <inertial>
      <mass value="0.114" />
      <origin xyz="0 0 0" />
      <inertia ixx="0.001" ixy="0.0" ixz="0.0"
               iyy="0.001" iyz="0.0"
               izz="0.001" />
    </inertial>
  </link>


  <joint name="$(arg robot_name)/base_joint" type="fixed">
    <parent link="$(arg robot_name)/base_footprint"/>
    <child link="$(arg robot_name)/base_link" />
    <origin xyz="0 0 0.010" rpy="0 0 0"/>
  </joint>

  <joint name="$(arg robot_name)/wheel_right_joint" type="continuous">
    <parent link="$(arg robot_name)/base_link"/>
    <child link="$(arg robot_name)/wheel_right_link"/>
    <origin xyz="0.0 -0.144 0.023" rpy="-1.57 0 0"/>
    <axis xyz="0 0 1"/>
  </joint>

  <joint name="$(arg robot_name)/wheel_left_joint" type="continuous">
    <parent link="$(arg robot_name)/base_link"/>
    <child link="$(arg robot_name)/wheel_left_link"/>
    <origin xyz="0.0 0.144 0.023" rpy="-1.57 0 0"/>
    <axis xyz="0 0 1"/>
  </joint>

  <joint name="$(arg robot_name)/caster_back_right_joint" type="fixed">
    <parent link="$(arg robot_name)/base_link"/>
    <child link="$(arg robot_name)/caster_back_right_link"/>
    <origin xyz="-0.177 -0.064 -0.004" rpy="-1.57 0 0"/>
  </joint>

  <joint name="$(arg robot_name)/caster_back_left_joint" type="fixed">
    <parent link="$(arg robot_name)/base_link"/>
    <child link="$(arg robot_name)/caster_back_left_link"/>
    <origin xyz="-0.177 0.064 -0.004" rpy="-1.57 0 0"/>
  </joint>

  <joint name="$(arg robot_name)/imu_joint" type="fixed">
    <parent link="$(arg robot_name)/base_link"/>
    <child link="$(arg robot_name)/imu_link"/>
    <origin xyz="0.0 0 0.068" rpy="0 0 0"/>
  </joint>

  <joint name="$(arg robot_name)/scan_joint" type="fixed">
    <parent link="$(arg robot_name)/base_link"/>
    <child link="$(arg robot_name)/base_scan"/>
    <origin xyz="-0.064 0 0.122" rpy="0 0 0"/>
  </joint>

  <joint name="$(arg robot_name)/camera_joint" type="fixed">
    <origin xyz="0.073 -0.161 0.084" rpy="0 0 -0.785"/>
    <parent link="$(arg robot_name)/base_link"/>
    <child link="$(arg robot_name)/camera_link"/>
  </joint>

  <link name="$(arg robot_name)/camera_link">
    <collision>
      <origin xyz="0.005 0.011 0.013" rpy="0 0 0"/>
      <geometry>
        <box size="0.015 0.030 0.027"/>
      </geometry>
    </collision>
  </link>

  <joint name="$(arg robot_name)/camera_rgb_joint" type="fixed">
    <origin xyz="0.003 0.011 0.009" rpy="0 0 0"/>
    <parent link="$(arg robot_name)/camera_link"/>
    <child link="$(arg robot_name)/camera_rgb_frame"/>
  </joint>

  <link name="$(arg robot_name)/camera_rgb_frame"/>

  <joint name="$(arg robot_name)/camera_rgb_optical_joint" type="fixed">
    <origin xyz="0 0 0" rpy="-1.57 0 -1.57"/>
    <parent link="$(arg robot_name)/camera_rgb_frame"/>
    <child link="$(arg robot_name)/camera_rgb_optical_frame"/>
  </joint>

  <link name="$(arg robot_name)/camera_rgb_optical_frame"/>

  <gazebo reference="$(arg robot_name)/base_link">
    <material>Gazebo/Orange</material>
  </gazebo>

  <gazebo reference="$(arg robot_name)/wheel_right_link">
    <material>Gazebo/Orange</material>
  </gazebo>

  <gazebo reference="$(arg robot_name)/wheel_left_link">
    <material>Gazebo/Orange</material>
  </gazebo>


  <gazebo reference="$(arg robot_name)/imu_link">
    <sensor name="imu" type="imu">
        <always_on>true</always_on>
        <update_rate>100</update_rate>
        <imu>
          <angular_velocity>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </z>
          </angular_velocity>
          <linear_acceleration>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </z>
          </linear_acceleration>
        </imu>
        <plugin name="imu" filename="libgazebo_ros_imu_sensor.so">
          <ros>
            <namespace>$(arg robot_name)</namespace>
            <remapping>~/out:=imu</remapping>
          </ros>
          <initialOrientationAsReference>false</initialOrientationAsReference>
          <frameName>$(arg robot_name)/imu_link</frameName>
        </plugin>
      </sensor>
  </gazebo>

  <gazebo reference="$(arg robot_name)/base_scan">
    <sensor type="gpu_ray" name="gpu_laser">
        <always_on>true</always_on>
        <visualize>false</visualize>
        <pose>-0.064 0 0.121 0 0 0</pose>
        <update_rate>5</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>360</samples>
              <resolution>1</resolution>
              <min_angle>-3.14159</min_angle>
              <max_angle>3.14159</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.1</min>
            <max>30.0</max>
            <resolution>0.015</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
        <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
          <ros>
            <namespace>$(arg robot_name)</namespace>
            <remapping>~/out:=scan</remapping>
          </ros>
          <output_type>sensor_msgs/LaserScan</output_type>
          <frame_name>$(arg robot_name)/base_scan</frame_name>
        </plugin>
        <gpu>true</gpu>
    </sensor>
    <material>Gazebo/Orange</material>
  </gazebo>





  <gazebo reference="$(arg robot_name)/camera_rgb_frame">
    <sensor type="depth" name="Camera">
      <always_on>true</always_on>
      <visualize>false</visualize>
      <updateRate>30</updateRate>
      <camera>
          <horizontal_fov>2</horizontal_fov>
          <image>
              <width>640</width>
              <height>480</height>
              <format>R8G8B8</format>
          </image>
          <clip>
              <near>0.1</near>
              <far>100</far>
          </clip>
      </camera>
      <plugin name="depth_camera" filename="libgazebo_ros_camera.so">
        <ros>
          <namespace>$(arg robot_name)</namespace>
        </ros>

        <cameraName>convoy_camera</cameraName>
        <frameName>$(arg robot_name)/camera_rgb_optical_frame</frameName>
        <imageTopicName>color/image_raw</imageTopicName>
        <cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
        <depthImageTopicName>depth/image_raw</depthImageTopicName>
        <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
        <pointCloudTopicName>depth/points</pointCloudTopicName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
      <gpu>true</gpu>
    </sensor>
  </gazebo>

  <gazebo>
    <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
          <ros>
            <namespace>$(arg robot_name)</namespace>
            <remapping>~/out:=scan</remapping>
          </ros>
          <output_type>sensor_msgs/LaserScan</output_type>
          <frame_name>$(arg robot_name)/base_scan</frame_name>
    </plugin>

    <plugin name="imu" filename="libgazebo_ros_imu_sensor.so">
          <ros>
            <namespace>$(arg robot_name)</namespace>
            <remapping>~/out:=imu</remapping>
          </ros>
          <initialOrientationAsReference>false</initialOrientationAsReference>
          <frameName>$(arg robot_name)/imu_link</frameName>
    </plugin>

    <plugin name="diff_drive" filename="libgazebo_ros_diff_drive.so">
      <ros>
        <namespace>$(arg robot_name)</namespace>
      </ros>

      <update_rate>30</update_rate>

      <!-- wheels -->
      <left_joint>$(arg robot_name)/wheel_left_joint</left_joint>
      <right_joint>$(arg robot_name)/wheel_right_joint</right_joint>

      <!-- kinematics -->
      <wheel_separation>0.287</wheel_separation>
      <wheel_diameter>0.066</wheel_diameter>

      <!-- limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>

      <command_topic>cmd_vel</command_topic>
      <odometry_topic>odom</odometry_topic>

      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>

      <odometry_frame>$(arg robot_name)/odom</odometry_frame>
      <robot_base_frame>$(arg robot_name)/base_footprint</robot_base_frame>

      <odometry_source>1</odometry_source>
    </plugin>

    <plugin name="joint_state" filename="libgazebo_ros_joint_state_publisher.so">
      <ros>
        <namespace>$(arg robot_name)</namespace>
        <remapping>~/out:=joint_states</remapping>
      </ros>
      <update_rate>30</update_rate>
      <joint_name>$(arg robot_name)/wheel_left_joint</joint_name>
      <joint_name>$(arg robot_name)/wheel_right_joint</joint_name>
    </plugin>

    <plugin name="depth_camera" filename="libgazebo_ros_camera.so">
      <ros>
        <namespace>$(arg robot_name)</namespace>
      </ros>

      <cameraName>convoy_camera</cameraName>
      <frameName>$(arg robot_name)/camera_rgb_optical_frame</frameName>
      <imageTopicName>color/image_raw</imageTopicName>
      <cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
      <depthImageTopicName>depth/image_raw</depthImageTopicName>
      <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
      <pointCloudTopicName>depth/points</pointCloudTopicName>
      <hackBaseline>0.07</hackBaseline>
      <distortionK1>0.0</distortionK1>
      <distortionK2>0.0</distortionK2>
      <distortionK3>0.0</distortionK3>
      <distortionT1>0.0</distortionT1>
      <distortionT2>0.0</distortionT2>
    </plugin>
  </gazebo>

</robot>